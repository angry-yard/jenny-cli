{
  // Projects will allow a simplier command interface
  // jenny [projectName]
  // This is to execute the database, tables, templates all together
  // Each item - database, tables, templates must be added in the corresponding sections
  // Any properties in each section will override the properties listed??
  // Is this really needed???
  "projects": [
    {
      "name": "TestProject",
      "databases": [
        {
          "name": "Handlebars",
          "tableConfig": [
            {
              // Can pass an array of tables
              "include": [ ],
              "includeAll": true,
              // Could also have a way to blacklist - with array of tables
              "exclude": [ ]
            }
          ]
        }
      ],
      //"languages": [
      //  {
      //    "english": [
      //  }
      //]
    }
  ],
  "templates": {
    // The source URL where templates are queried or pulled during an install
    // This can be a public or priviate repository
    "sourcePath": "http://jenny.ryangrady.net/templates/", // Should this be moved to the file level?
    // When a template is installed, the default directory of it
    "localPath": "C:\\Templates",
    // The templates that are going to be used for this project
    "files": [
      {
        "name": "Dto",
        // Need to know what service is associated with template
        // If not included, needs to be downloaded
        "service": "handlebars",
        // If file was created locally this will be empty or null
        "package": "rgrady\\angular",
        "fileName": "dto.template",
        "output": "C:\\Templates\\",
        // This should be a valid file type - these should be reflected in the generators/fileTypes/File.ts and Generator/fileTypes/fileTypes.ts
        "fileType": "CSharp"
      },
      {
        "name": "Sql-Insert",
        "service": "handlebars",
        "package": "rgrady\\angular",
        "fileName": "sql-insert.template",
        "output": "C:\\Templates\\Sql",
        "fileType": "Sql"
      }
    ]
  },
  "databases": [
    {
      "name": "Handlebars",
      "connectionString": "",
      // This the name of the folder under database where the service is created
      "service": "mssql",
      "tables": [
        {
          // Table Id will be the object_id from SQL Server
          "tableId": 0,
          "name": "People",
          // This defines all the templates to be run against this table
          // If no templates are listed, it will not be used
          "templates": [ "Dto", "Sql-Insert" ],
          /*
          Parameters can also be used for data generation.  These templates can be used to duplicate data across rows to use logic
          that requires them to be linked - like the example illustrated below, the UpdateDate must be greater than the CreateDate.
          They are executed in order, so a dependent parameter needs to be called after the parent.
          Aside from inserting javascript into the output using ' and ', javascript can also be executed as in RandomDays.
          This will execute the javascript
          In addition a method can be inserted as well so the Javascript can be part of the build and testing process, thus making     
          code a bit cleaner and easier to debug - this is the preferred method.
          Be aware that this javascript execution using eval - like (eval(function));
          */
          "parameters": {
            "CreateDate": "'function() { return new Date(); }'",
            "RandomDays1": "function() { return 7; }",
            "RandomDays2": "function() { return Chance.RandomNumber(); }",
            "UpdateDate": "'function() { return CreateDate.addDays({{RandomDays}}); }'"
          },
          // This includes all the columns that are part of the primary key
          // Virtual columns cannot be listed
          // Move these to the column level
          // Also allow virtual relationships - just in case they are not defined in the database
          "primaryKeyColumns": [
            {
              "columnId": 0,
              "order": 1
            }
          ],
          "foreignKeyColumns": [
            {
              "tableId": 0,
              "order":  1
            }
          ],
          "columns": [
            {
              "columndId": 0,
              "name": "PersonId",
              "dataType": "int",
              "isNullable": false,
              "isIdentity": true,
              // This is the method in the data generator used to create the data
              // If this item is an empty string or null, nothing will be generated
              "dataGenerator": "",
              "order": 1,
              // Each column either needs to be marked ReadOnly, Hide or have displays associated with it
              "display": "hide"
              },
            {
              "columndId": 1,
              "name": "FirstName",
              "dataType": "varchar(200)",
              "isNullable": false,
              "isIdentity": false,
              "dataGenerator": "name.first",
              "order": 2,
              "display": [
                {
                  "english": "First Name"
                },
                {
                  "spanish": "Primero Nombre"
                }
              ]
            },
            {
              "columndId": 2,
              "name": "LastName",
              "dataType": "varchar(200)",
              "isNullable": true,
              "isIdentity": false,
              "dataGenerator": "name.last",
              "order": 3,
              "display": [
                {
                  "english": "Last Name"
                },
                {
                  "spanish": "Apellido"
                }
              ]
            },
            {
              "columndId": 3,
              "name": "Update",
              "dataType": "smalldatetime",
              "isNullable": false,
              "isIdentity": false,
              // "dataGenerator": "datetime.now" would work, but you can also write a function to do whatever you need it to do
              // Method that executes this will look for the function() if not there, it will execute the method against the Chance library
              "dataGenerator": "function() { return new Date(); }",
              // Or a paramter can be used
              // "dataGenerator": "UpdateDate"
              "order": 4,
              "display":  "readonly"
            }
          ],
          // These are columns that are added to the object, like a calculated field
          "virtualColumns": [
            {
              "columndId": 4,
              "name": "FullName",
              "dataType": "varchar(200)",
              "returnTemplate": "{{FirstName}} + {{LastName}}",
              "order": 5,
              "display": "readonly"
            },
            // They can also use the parameters either to execute code or used in a template
            {
              "columndId": 5,
              "name": "RandomNumber",
              "dataType": "int",
              "returnFunction": "function() { return {{RandomDays}}; }",
              "order": 6,
              "display": "readonly"
            }
          ]
        }
      ]
    }
  ],
  // Variables used throughout the system
  // Can be used in templates
  "globalVariables": {
    "dtoNamespace": "Handlebars.Dtos"
  }
}